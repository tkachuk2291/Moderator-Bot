import asyncio
from datetime import datetime, timedelta
from typing import Optional

from aiogram import F, Router, Bot
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.types import ChatPermissions, Message
from aiogram.filters.command import CommandObject

from ..filters import IsAdmin
from ..data_store import DataStore, HistoryEntry
from ..utils.parse import parse_duration_to_seconds


moderation_router = Router()


# text moderation handlers moved to text_moderation_router


@moderation_router.message(Command("replyreport"), IsAdmin())
async def reply_report(message: Message):
    admin_fullname = message.from_user.full_name
    admin_name = message.from_user.first_name
    role = "–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä"
    phrases = [
        f"üí¨ <b>–í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥: {role} {admin_fullname} </b>\n\n–í—ñ—Ç–∞—é, {admin_name} –ú—á–∏—Ç—å –≤–∞–º –Ω–∞ –¥–æ–ø–æ–º–æ–≥—É.",
        f"üí¨ <b>–í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥: {role} {admin_fullname} </b> {admin_name} –≤–∂–µ –≤ –¥–æ—Ä–æ–∑—ñ!",
        f"üí¨ <b>–í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥: {role} {admin_fullname} </b>\n\n{admin_name} –ø–æ—Å–ø—ñ—à–∞—î –≤–∞–º –Ω–∞ –¥–æ–ø–æ–º–æ–≥—É!",
    ]
    import random

    first_text = random.choice(phrases)
    await message.answer(first_text, parse_mode="HTML")
    await asyncio.sleep(random.randint(3, 7))
    second_text = (
        f"üí¨ <b>–í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ {admin_fullname}</b>\n\n"
        f"–í—ñ—Ç–∞—é, –º–µ–Ω–µ –∑–≤–∞—Ç–∏ {admin_name}, –ø—Ä–∞—Ü—é—é –ø–æ –≤–∞—à—ñ–π –ó–∞—è–≤—Ü—ñ."
    )
    await message.answer(second_text, parse_mode="HTML")


@moderation_router.message(Command("spec", "spectator"), IsAdmin())
async def spec_user(message: Message, bot: Bot, store: DataStore):
    if not message.reply_to_message:
        await message.reply("‚ùó –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π –∫–æ–º–∞–Ω–¥—É —É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.")
        return
    target_user = message.reply_to_message.from_user
    user_id = str(target_user.id)
    user_name = target_user.full_name
    chat_member = await bot.get_chat_member(chat_id=message.chat.id, user_id=target_user.id)
    status = chat_member.status
    role = "–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä" if status in ["creator", "administrator"] else "–£—á–∞—Å–Ω–∏–∫"
    info_text = (
        f"<b>üë§ –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:</b>\n"
        f"üìù –Ü–º'—è: {user_name}\n"
        f"üè∑ –°—Ç–∞—Ç—É—Å/–†–æ–ª—å: {role}\n"
        f"üÜî ID: {user_id}\n"
    )
    if role == "–£—á–∞—Å–Ω–∏–∫":
        punishments = store.get_history(target_user.id)
        if punishments:
            info_text += "\n<b>üëÆ –Ü—Å—Ç–æ—Ä—ñ—è –ø–æ–∫–∞—Ä–∞–Ω—å:</b>\n"
            for idx, p in enumerate(punishments, start=1):
                info_text += (
                    f"{idx}. ‚õî <b>–¢–∏–ø:</b> {p.get('type','')}\n"
                    f"   üìå <b>–ü—Ä–∏—á–∏–Ω–∞:</b> {p.get('reason','')}\n"
                    f"   ‚è∞ <b>–î–∞—Ç–∞:</b> {p.get('date','')}\n"
                    f"   üìÖ <b>–î–æ:</b> {p.get('until','‚Äî')}\n\n"
                )
        else:
            info_text += "\n‚úÖ –ü–æ–∫–∞—Ä–∞–Ω—å –Ω–µ–º–∞—î."
    await message.reply(info_text)


@moderation_router.message(Command("unban"))
async def unban_user(message: Message, bot: Bot):
    if not message.reply_to_message:
        await message.reply("‚ùó –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π –∫–æ–º–∞–Ω–¥—É —É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.")
        return
    target_user = message.reply_to_message.from_user
    admin_fullname = message.from_user.full_name
    role = "–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä"
    try:
        await bot.unban_chat_member(
            chat_id=message.chat.id,
            user_id=target_user.id,
            only_if_banned=True,
        )
        await message.answer(f"‚úÖ {role} {admin_fullname} –†–æ–∑–±–ª–æ–∫—É–≤–∞–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {target_user.full_name}")
    except Exception as e:
        await message.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–æ–∑–±–∞–Ω—ñ: {e}")


@moderation_router.message(Command("ban"))
async def ban_user(message: Message, command: CommandObject, bot: Bot, store: DataStore):
    if not message.reply_to_message:
        await message.reply("‚ùó –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π: /ban <—á–∞—Å –∞–±–æ –ø–µ—Ä–º–∞–Ω–µ–Ω—Ç–Ω–∏–π>, –ø—Ä–∏—á–∏–Ω–∞ (—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è)")
        return
    args = command.args
    if not args:
        await message.reply("‚ùó –§–æ—Ä–º–∞—Ç: /ban <—á–∞—Å –∞–±–æ –ø–µ—Ä–º–∞–Ω–µ–Ω—Ç–Ω–∏–π>, –ø—Ä–∏—á–∏–Ω–∞")
        return
    parts = args.split(",", 1)
    duration_reason = parts[0].strip()
    reason = parts[1].strip() if len(parts) > 1 else "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"
    target_user = message.reply_to_message.from_user
    seconds, duration_text = parse_duration_to_seconds(duration_reason)
    try:
        until_date = None if seconds is None else datetime.now() + timedelta(seconds=seconds)
        await bot.restrict_chat_member(
            chat_id=message.chat.id,
            user_id=target_user.id,
            permissions=ChatPermissions(
                can_send_messages=False,
                can_send_media_messages=False,
                can_send_other_messages=False,
                can_add_web_page_previews=False,
            ),
            until_date=until_date,
        )
        await message.answer(
            f"‚õî –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä {message.from_user.full_name} –∑–∞–±–ª–æ–∫—É–≤–∞–≤ {target_user.full_name} "
            f"{duration_text if duration_text else '–Ω–∞–∑–∞–≤–∂–¥–∏'}.\nüìã –ü—Ä–∏—á–∏–Ω–∞: {reason}"
        )
        store.append_history(
            target_user.id,
            HistoryEntry(
                type="ban",
                reason=reason,
                date=datetime.now().strftime("%d.%m.%Y %H:%M"),
                until=until_date.strftime("%d.%m.%Y %H:%M") if until_date else "–ù–∞–∑–∞–≤–∂–¥–∏",
            ),
        )
    except Exception as e:
        await message.reply(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –±–∞–Ω—ñ: {e}")


@moderation_router.message(Command("mute"))
async def mute_user(message: Message, command: CommandObject, bot: Bot, store: DataStore):
    if not message.reply_to_message:
        await message.reply("‚ùó –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π: /mute <—á–∞—Å>, –ø—Ä–∏—á–∏–Ω–∞ (—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è)")
        return
    args = command.args
    if not args:
        await message.reply("‚ùó –§–æ—Ä–º–∞—Ç: /mute <—á–∞—Å>, –ø—Ä–∏—á–∏–Ω–∞")
        return
    parts = args.split(",", 1)
    duration_reason = parts[0].strip()
    reason = parts[1].strip() if len(parts) > 1 else "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"
    target_user = message.reply_to_message.from_user
    seconds, duration_text = parse_duration_to_seconds(duration_reason)
    if not seconds:
        await message.reply("‚ùó –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —á–∞—Å—É. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π: 10m, 2h, 7d")
        return
    until_date = datetime.now() + timedelta(seconds=seconds)
    try:
        await bot.restrict_chat_member(
            chat_id=message.chat.id,
            user_id=target_user.id,
            permissions=ChatPermissions(can_send_messages=False),
            until_date=until_date,
        )
        await message.answer(
            f"üîá –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä {message.from_user.full_name} –≤–∏–¥–∞–≤ –º—É—Ç "
            f"{target_user.full_name} –Ω–∞ {duration_text}.\nüìã –ü—Ä–∏—á–∏–Ω–∞: {reason}"
        )
        store.append_history(
            target_user.id,
            HistoryEntry(
                type="mute",
                reason=reason,
                date=datetime.now().strftime("%d.%m.%Y %H:%M"),
                until=until_date.strftime("%d.%m.%Y %H:%M"),
            ),
        )
        # No local mute tracking; rely on Telegram until_date
    except Exception as e:
        await message.reply(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –º—É—Ç—ñ: {e}")


@moderation_router.message(Command("unmute"))
async def unmute_user(message: Message, bot: Bot):
    if not message.reply_to_message:
        await message.reply("‚ùó –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π –∫–æ–º–∞–Ω–¥—É —É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.")
        return
    target_user = message.reply_to_message.from_user
    try:
        await bot.restrict_chat_member(
            chat_id=message.chat.id,
            user_id=target_user.id,
            permissions=ChatPermissions(
                can_send_messages=True,
                can_send_media_messages=True,
                can_send_other_messages=True,
                can_add_web_page_previews=True,
            ),
        )
        await message.answer(f"üîä –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä {message.from_user.full_name} –∑–Ω—è–≤ –º—É—Ç {target_user.full_name}.")
        # No local mute tracking to clear
    except Exception as e:
        await message.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–Ω—è—Ç—Ç—ñ –º—É—Ç–∞: {e}")


@moderation_router.message(Command("kick"))
async def kick_user(message: Message, bot: Bot, store: DataStore):
    if not message.reply_to_message:
        await message.reply("‚ùó –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π –∫–æ–º–∞–Ω–¥—É —É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.")
        return
    target_user = message.reply_to_message.from_user
    reason = "–ë–µ–∑ –ø—Ä–∏—á–∏–Ω–∏"
    try:
        await bot.ban_chat_member(
            chat_id=message.chat.id,
            user_id=target_user.id,
            until_date=datetime.now() + timedelta(seconds=30),
        )
        await bot.unban_chat_member(chat_id=message.chat.id, user_id=target_user.id)
        store.append_history(
            target_user.id,
            HistoryEntry(
                type="kick",
                reason=reason,
                date=datetime.now().strftime("%d.%m.%Y %H:%M"),
                until="‚Äî",
            ),
        )
        await message.answer(
            f"üë¢ –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä {message.from_user.full_name} –≤—ñ–¥‚Äô—î–¥–Ω–∞–≤ {target_user.full_name}.\nüìå –ü—Ä–∏—á–∏–Ω–∞: {reason}"
        )
    except Exception as e:
        await message.reply(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—ñ –∫—ñ–∫—É: {e}")


@moderation_router.message(Command("warn"), IsAdmin())
async def warn_user(message: Message, command: CommandObject, store: DataStore):
    if not message.reply_to_message:
        await message.reply("‚ùó –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π –∫–æ–º–∞–Ω–¥—É —É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.")
        return
    target_user = message.reply_to_message.from_user
    reason = command.args if command.args else "–ë–µ–∑ –ø—Ä–∏—á–∏–Ω–∏"
    store.append_history(
        target_user.id,
        HistoryEntry(
            type="warn",
            reason=reason,
            date=datetime.now().strftime("%d.%m.%Y %H:%M"),
            until="‚Äî",
        ),
    )
    await message.answer(
        f"‚ö†Ô∏è –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä {message.from_user.full_name} –ø–æ–ø–µ—Ä–µ–¥–∏–≤ {target_user.full_name}.\nüìù –ü—Ä–∏—á–∏–Ω–∞: {reason}"
    )


@moderation_router.message(Command("unwarn"), IsAdmin())
async def unwarn_user(message: Message, store: DataStore):
    args = message.text.split()
    if message.reply_to_message:
        target_user = message.reply_to_message.from_user
    elif len(args) >= 2:
        # Attempt to resolve only within reply context kept simple
        await message.reply("<b>‚ùó –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ reply –¥–ª—è –∑–Ω—è—Ç—Ç—è –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è.</b>")
        return
    else:
        await message.reply("<b>‚ùó –§–æ—Ä–º–∞—Ç: /unwarn (—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è)</b>")
        return
    removed = store.pop_last_warn(target_user.id)
    if removed:
        await message.answer(
            f"‚úÖ –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä {message.from_user.full_name} –∑–Ω—è–≤ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è —É {target_user.full_name}.\n"
        )
    else:
        await message.reply(f"<b>‚ùó –£ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {target_user.full_name} –Ω–µ–º–∞—î –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω—å –¥–ª—è –∑–Ω—è—Ç—Ç—è.</b>")

