import os
from typing import List, Tuple

import pandas as pd
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import CallbackQuery, Message

from ..config import settings
from ..keyboards import main_menu_kb, back_to_help_kb, faq_list_kb, faq_back_kb


help_router = Router()


def load_faq() -> List[Tuple[str, str]]:
    if not os.path.exists(settings.FAQ_FILE):
        raise FileNotFoundError(f"–§–∞–π–ª FAQ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {settings.FAQ_FILE}")
    df = pd.read_excel(settings.FAQ_FILE)
    df.columns = [c.strip().lower() for c in df.columns]
    if not {"–≤–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è", "–≤—ñ–¥–ø–æ–≤—ñ–¥—å"}.issubset(df.columns):
        raise ValueError("–£ —Ñ–∞–π–ª—ñ –≤—ñ–¥—Å—É—Ç–Ω—ñ –∫–æ–ª–æ–Ω–∫–∏ '–í–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è' –∞–±–æ '–í—ñ–¥–ø–æ–≤—ñ–¥—å'")
    df["–≤–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è"] = df["–≤–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è"].astype(str).str.strip()
    df["–≤—ñ–¥–ø–æ–≤—ñ–¥—å"] = df["–≤—ñ–¥–ø–æ–≤—ñ–¥—å"].astype(str).str.strip()
    df = df[(df["–≤–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è"] != "") & (df["–≤—ñ–¥–ø–æ–≤—ñ–¥—å"] != "")]
    return list(df[["–≤–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è", "–≤—ñ–¥–ø–æ–≤—ñ–¥—å"]].itertuples(index=False, name=None))


@help_router.message(Command(commands=["help"]))
async def open_panel(message: Message):
    await message.answer("<b>–©–æ –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å:</b>", reply_markup=main_menu_kb())


@help_router.callback_query(F.data == "back_help")
async def back_to_help(callback: CallbackQuery):
    await callback.message.edit_text("<b>–©–æ –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å:</b>", reply_markup=back_to_help_kb())
    await callback.answer()


@help_router.callback_query(F.data == "become_an_admin")
async def become_admin(callback: CallbackQuery):
    text = (
        "<b>üëë –Ø–∫ —Å—Ç–∞—Ç–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º:</b>\n\n"
        "–ü–æ–¥–∞–π—Ç–µ –∑–∞—è–≤–∫—É —á–µ—Ä–µ–∑ –æ—Ñ—ñ—Ü—ñ–π–Ω—É Google —Ñ–æ—Ä–º—É:\n"
        f"<a href='{settings.ADMIN_APPLICATION_URL}'>üìã –ü–æ–¥–∞—Ç–∏ –∑–∞—è–≤–∫—É</a>"
    )
    await callback.message.answer(text, disable_web_page_preview=True)
    await callback.answer()


@help_router.callback_query(F.data == "chat_rules")
async def chat_rules(callback: CallbackQuery):
    text = f"<b>‚ùì –û–∑–Ω–∞–π–æ–º–∏—Ç–∏—Å—è –∑ –ø—Ä–∞–≤–∏–ª–∞–º–∏:</b> <a href='{settings.CHAT_RULES_URL}'>‚úÖ –û–∑–Ω–∞–π–æ–º–∏—Ç–∏—Å—è</a>"
    await callback.message.answer(text, disable_web_page_preview=True)
    await callback.answer()


@help_router.callback_query(F.data == "main_menu")
async def go_main_menu(callback: CallbackQuery):
    await callback.message.edit_text("<b>–©–æ –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å:</b>", reply_markup=main_menu_kb())
    await callback.answer()


@help_router.callback_query(F.data == "more_questions")
async def process_more_questions(callback: CallbackQuery):
    await callback.answer()
    try:
        faq_list = load_faq()
        questions = [q for q, _ in faq_list]
        await callback.message.edit_text(
            "<b>üìã –°–ø–∏—Å–æ–∫ –ø–∏—Ç–∞–Ω—å:</b>\n\n–û–±–µ—Ä—ñ—Ç—å, —â–æ–± –ø–æ–±–∞—á–∏—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å üëá",
            reply_markup=faq_list_kb(questions),
        )
    except Exception as e:
        await callback.message.edit_text(f"<b>‚ùó –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ FAQ:</b> {str(e)}")


@help_router.callback_query(F.data.startswith("faq_"))
async def show_faq_answer(callback: CallbackQuery):
    await callback.answer()
    try:
        faq_list = load_faq()
        idx = int(callback.data.split("_")[1]) - 1
        if idx < 0 or idx >= len(faq_list):
            await callback.message.edit_text("<b>‚ùó –ü–∏—Ç–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.</b>")
            return
        question, answer = faq_list[idx]
        if answer.startswith("http://") or answer.startswith("https://"):
            text = f"<b>‚ùì {question}</b>\n\n‚úÖ –ú–æ–∂–Ω–∞ –¥—ñ–∑–Ω–∞—Ç–∏—Å—è: <a href='{answer}'>—Ç—É—Ç</a>"
        else:
            text = f"<b>‚ùì {question}</b>\n\n‚úÖ {answer}"
        await callback.message.edit_text(text, reply_markup=faq_back_kb())
    except Exception as e:
        await callback.message.edit_text(f"<b>‚ùó –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ FAQ:</b> {str(e)}")

