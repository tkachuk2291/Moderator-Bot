import asyncio
from datetime import datetime, timedelta
from typing import Optional

from aiogram import Router, Bot
from aiogram.types import Message, ChatPermissions
from aiogram.filters import Command
from aiogram.filters.command import CommandObject

from filters import IsAdmin
from data_store import DataStore, HistoryEntry, store
from utils.parse import parse_duration_to_seconds

moderation_router = Router()


# ------------------ –õ–û–ì –ü–û–ö–ê–†–ê–ù–¨ ------------------
def log_punishment(message: Message, target_user, punishment_type, duration_text=None, reason="–ù–µ –≤–∫–∞–∑–∞–Ω–æ"):
    admin_name = message.from_user.full_name
    target_name = target_user.full_name

    if punishment_type == "ban":
        text = f"‚õî –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä {admin_name} –∑–∞–±–ª–æ–∫—É–≤–∞–≤ {target_name} " \
               f"{duration_text if duration_text else '–Ω–∞–∑–∞–≤–∂–¥–∏'}.\nüìã –ü—Ä–∏—á–∏–Ω–∞: {reason}"
    elif punishment_type == "mute":
        text = f"üîá –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä {admin_name} –≤–∏–¥–∞–≤ –º—É—Ç {target_name} " \
               f"–Ω–∞ {duration_text}.\nüìã –ü—Ä–∏—á–∏–Ω–∞: {reason}"
    elif punishment_type == "kick":
        text = f"üë¢ –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä {admin_name} –≤—ñ–¥‚Äô—î–¥–Ω–∞–≤ {target_name}.\nüìå –ü—Ä–∏—á–∏–Ω–∞: {reason}"
    elif punishment_type == "warn":
        text = f"‚ö†Ô∏è –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä {admin_name} –ø–æ–ø–µ—Ä–µ–¥–∏–≤ {target_name}.\nüìù –ü—Ä–∏—á–∏–Ω–∞: {reason}"
    else:
        text = f"‚ùó –ù–µ–≤—ñ–¥–æ–º–∏–π —Ç–∏–ø –ø–æ–∫–∞—Ä–∞–Ω–Ω—è –¥–ª—è {target_name}"

    # –õ–æ–≥—É–≤–∞–Ω–Ω—è –≤ DataStore
    store.append_history(
        target_user.id,
        HistoryEntry(
            type=punishment_type,
            reason=reason,
            date=datetime.now().strftime("%d.%m.%Y %H:%M"),
            text=text
        )
    )
    return text


# ------------------ REPLY REPORT ------------------
@moderation_router.message(Command("replyreport"), IsAdmin())
async def reply_report(message: Message):
    admin_fullname = message.from_user.full_name
    admin_name = message.from_user.first_name
    role = "–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä"
    import random

    phrases = [
        f"üí¨ <b>–í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥: {role} {admin_fullname} </b>\n\n–í—ñ—Ç–∞—é, {admin_name} –º—á–∏—Ç—å –≤–∞–º –Ω–∞ –¥–æ–ø–æ–º–æ–≥—É.",
        f"üí¨ <b>–í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥: {role} {admin_fullname} </b> {admin_name} –≤–∂–µ –≤ –¥–æ—Ä–æ–∑—ñ!",
        f"üí¨ <b>–í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥: {role} {admin_fullname} </b>\n\n{admin_name} –ø–æ—Å–ø—ñ—à–∞—î –≤–∞–º –Ω–∞ –¥–æ–ø–æ–º–æ–≥—É!",
    ]
    first_text = random.choice(phrases)
    await message.answer(first_text, parse_mode="HTML")
    await asyncio.sleep(random.randint(3, 7))
    second_text = f"üí¨ <b>–í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ {admin_fullname}</b>\n\n–í—ñ—Ç–∞—é, –º–µ–Ω–µ –∑–≤–∞—Ç–∏ {admin_name}, –ø—Ä–∞—Ü—é—é –ø–æ –≤–∞—à—ñ–π –∑–∞—è–≤—Ü—ñ."
    await message.answer(second_text, parse_mode="HTML")


# ------------------ SPEC ------------------
@moderation_router.message(Command("spec", "spectator"), IsAdmin())
async def spec_user(message: Message, bot: Bot, store: DataStore):
    if not message.reply_to_message:
        await message.reply("‚ùó –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π –∫–æ–º–∞–Ω–¥—É —É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.")
        return

    target_user = message.reply_to_message.from_user
    user_id = str(target_user.id)
    user_name = target_user.full_name
    karma = store.get_karma(user_id, True)
    chat_member = await bot.get_chat_member(chat_id=message.chat.id, user_id=target_user.id)
    status = chat_member.status
    role = "–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä" if status in ["creator", "administrator"] else "–£—á–∞—Å–Ω–∏–∫"
    
    info_text = (
        f"<b>üë§ –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:</b>\n"
        f"üìù –Ü–º'—è: {user_name}\n"
        f"üè∑ –°—Ç–∞—Ç—É—Å: {role}\n"
        f"‚öñÔ∏è –ö–∞—Ä–º–∞: {karma}"
        f"üÜî ID: {user_id}\n"
    )

    if role == "–£—á–∞—Å–Ω–∏–∫":
        punishments: list[HistoryEntry] = store.get_history(target_user.id)
        if punishments:
            info_text += "\n<b>üëÆ –Ü—Å—Ç–æ—Ä—ñ—è –ø–æ–∫–∞—Ä–∞–Ω—å:</b>\n"
            for idx, entry in enumerate(punishments, start=1):
                info_text += (
                    f"{idx}. <i>{entry.date}</i>\n"
                    f"{entry.text}\n\n"
                )
        else:
            info_text += "\n‚úÖ –ü–æ–∫–∞—Ä–∞–Ω—å –Ω–µ–º–∞—î."

    await message.reply(info_text)


# ------------------ UNBAN ------------------
@moderation_router.message(Command("unban"))
async def unban_user(message: Message, bot: Bot):
    if not message.reply_to_message:
        await message.reply("‚ùó –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π –∫–æ–º–∞–Ω–¥—É —É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.")
        return
    target_user = message.reply_to_message.from_user
    admin_fullname = message.from_user.full_name
    role = "–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä"
    try:
        await bot.unban_chat_member(chat_id=message.chat.id, user_id=target_user.id, only_if_banned=True)
        await message.answer(f"‚úÖ {role} {admin_fullname} —Ä–æ–∑–±–ª–æ–∫—É–≤–∞–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {target_user.full_name}")
    except Exception as e:
        await message.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–æ–∑–±–∞–Ω—ñ: {e}")


# ------------------ BAN ------------------
@moderation_router.message(Command("ban"))
async def ban_user(message: Message, command: CommandObject, bot: Bot):
    if not message.reply_to_message:
        await message.reply("‚ùó –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π: /ban <—á–∞—Å –∞–±–æ –ø–µ—Ä–º–∞–Ω–µ–Ω—Ç–Ω–∏–π>, –ø—Ä–∏—á–∏–Ω–∞ (—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è)")
        return

    args = command.args
    if not args:
        await message.reply("‚ùó –§–æ—Ä–º–∞—Ç: /ban <—á–∞—Å –∞–±–æ –ø–µ—Ä–º–∞–Ω–µ–Ω—Ç–Ω–∏–π>, –ø—Ä–∏—á–∏–Ω–∞")
        return

    parts = args.split(",", 1)
    duration_reason = parts[0].strip()
    reason = parts[1].strip() if len(parts) > 1 else "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"
    target_user = message.reply_to_message.from_user

    seconds, duration_text = parse_duration_to_seconds(duration_reason)

    until_date = None if seconds is None else datetime.now() + timedelta(seconds=seconds)

    try:
        await bot.restrict_chat_member(
            chat_id=message.chat.id,
            user_id=target_user.id,
            permissions=ChatPermissions(
                can_send_messages=False,
                can_send_media_messages=False,
                can_send_other_messages=False,
                can_add_web_page_previews=False,
            ),
            until_date=until_date,
        )
        text = log_punishment(message, target_user, "ban", duration_text, reason)
        await message.answer(text)
    except Exception as e:
        await message.reply(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –±–∞–Ω—ñ: {e}")


# ------------------ MUTE ------------------
@moderation_router.message(Command("mute"))
async def mute_user(message: Message, command: CommandObject, bot: Bot):
    if not message.reply_to_message:
        await message.reply("‚ùó –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π: /mute <—á–∞—Å>, –ø—Ä–∏—á–∏–Ω–∞ (—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è)")
        return

    args = command.args
    if not args:
        await message.reply("‚ùó –§–æ—Ä–º–∞—Ç: /mute <—á–∞—Å>, –ø—Ä–∏—á–∏–Ω–∞")
        return

    parts = args.split(",", 1)
    duration_reason = parts[0].strip()
    reason = parts[1].strip() if len(parts) > 1 else "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"
    target_user = message.reply_to_message.from_user

    seconds, duration_text = parse_duration_to_seconds(duration_reason)
    if not seconds:
        await message.reply("‚ùó –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —á–∞—Å—É. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π: 10m, 2h, 7d")
        return

    until_date = datetime.now() + timedelta(seconds=seconds)

    try:
        await bot.restrict_chat_member(
            chat_id=message.chat.id,
            user_id=target_user.id,
            permissions=ChatPermissions(can_send_messages=False),
            until_date=until_date,
        )
        text = log_punishment(message, target_user, "mute", duration_text, reason)
        await message.answer(text)
    except Exception as e:
        await message.reply(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –º—É—Ç—ñ: {e}")


# ------------------ UNMUTE ------------------
@moderation_router.message(Command("unmute"))
async def unmute_user(message: Message, bot: Bot):
    if not message.reply_to_message:
        await message.reply("‚ùó –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π –∫–æ–º–∞–Ω–¥—É —É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.")
        return
    target_user = message.reply_to_message.from_user
    try:
        await bot.restrict_chat_member(
            chat_id=message.chat.id,
            user_id=target_user.id,
            permissions=ChatPermissions(
                can_send_messages=True,
                can_send_media_messages=True,
                can_send_other_messages=True,
                can_add_web_page_previews=True,
            ),
        )
        await message.answer(f"üîä –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä {message.from_user.full_name} –∑–Ω—è–≤ –º—É—Ç {target_user.full_name}.")
    except Exception as e:
        await message.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–Ω—è—Ç—Ç—ñ –º—É—Ç–∞: {e}")


# ------------------ KICK ------------------
@moderation_router.message(Command("kick"))
async def kick_user(message: Message, bot: Bot):
    if not message.reply_to_message:
        await message.reply("‚ùó –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π –∫–æ–º–∞–Ω–¥—É —É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.")
        return
    target_user = message.reply_to_message.from_user
    reason = "–ë–µ–∑ –ø—Ä–∏—á–∏–Ω–∏"
    try:
        await bot.ban_chat_member(chat_id=message.chat.id, user_id=target_user.id,
                                  until_date=datetime.now() + timedelta(seconds=30))
        await bot.unban_chat_member(chat_id=message.chat.id, user_id=target_user.id)
        text = log_punishment(message, target_user, "kick", reason=reason)
        await message.answer(text)
    except Exception as e:
        await message.reply(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—ñ –∫—ñ–∫—É: {e}")


# ------------------ WARN ------------------
@moderation_router.message(Command("warn"), IsAdmin())
async def warn_user(message: Message, command: CommandObject):
    if not message.reply_to_message:
        await message.reply("‚ùó –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π –∫–æ–º–∞–Ω–¥—É —É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.")
        return
    target_user = message.reply_to_message.from_user
    reason = command.args if command.args else "–ë–µ–∑ –ø—Ä–∏—á–∏–Ω–∏"
    text = log_punishment(message, target_user, "warn", reason=reason)
    await message.answer(text)


# ------------------ UNWARN ------------------
@moderation_router.message(Command("unwarn"), IsAdmin())
async def unwarn_user(message: Message):
    if not message.reply_to_message:
        await message.reply("‚ùó –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥—É —É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.")
        return
    target_user = message.reply_to_message.from_user
    removed = store.pop_last_warn(target_user.id)
    if removed:
        await message.answer(f"‚úÖ –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä {message.from_user.full_name} –∑–Ω—è–≤ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è —É {target_user.full_name}.")
    else:
        await message.reply(f"‚ùó –£ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {target_user.full_name} –Ω–µ–º–∞—î –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω—å –¥–ª—è –∑–Ω—è—Ç—Ç—è.")
